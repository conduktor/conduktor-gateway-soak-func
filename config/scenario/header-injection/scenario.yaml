title: Header Injection
services:
  kafka1:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka2:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka3:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  gateway1:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      gateway.host: http://localhost:8888
  gateway2:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      gateway.host: http://localhost:8889

actions:

  - type: INTRODUCTION
    title: Dynamic Header Injection & Removal
    markdown: |
      There are multiple interceptors available for manipulating headers, either injection or regex based removal. 
      
      This demo will run you through some of these use cases step-by-step.

  - type: FILE
    title: Review the docker compose environment
    filename: docker-compose.yaml
    markdown: |
      As can be seen from `docker-compose.yaml` the demo environment consists of the following:
      
      * A single Zookeeper Server
      * A main 3 nodes Kafka cluster
      * A 2 nodes Conduktor Gateway server

  - type: DOCKER
    title: Start the docker environment
    command: docker compose up -d --wait
    markdown: Start the environment with

  - type: CREATE_VIRTUAL_CLUSTERS
    title: Create `teamA` virtual cluster
    gateway: gateway1
    name: teamA

  - type: CREATE_TOPICS
    title: Create the `users` topic
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topics:
      - name: users
        replicationFactor: 1
        partitions: 1

  - type: ADD_INTERCEPTORS
    title: Create `inject-headers` interceptor
    gateway: gateway1
    interceptors:
      teamA:
        inject-headers:
          "pluginClass": "io.conduktor.gateway.interceptor.DynamicHeaderInjectionPlugin"
          "priority": 100
          "config": {
            "headers": {
              "X-MY-KEY": "my own value",
              "X-USER-IP": "{{userIp}}",
              "X-USERNAME": "{{user}}",
              "X-INTERPOLATED": "{{userIp}} to {{gatewayIp}} of {{user}}"
            }
          }
    markdown: |
      Let's create the interceptor to inject various headers

  - type: PRODUCE
    title: Send tom and florent into `users`
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: users
    messages:
      - value: '{"name":"tom","username":"tom@conduktor.io","password":"motorhead","visa":"#abc123","address":"Chancery lane, London"}'
      - value: '{"name":"florent","username":"florent@conduktor.io","password":"kitesurf","visa":"#888999XZ","address":"Dubai, UAE"}'

  - type: CONSUME
    title: Verify tom and florent have the corresponding headers
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: users
    showHeaders: true
    maxMessages: 2
    assertSize: 2
    assertions:
      - description: Confirm tom has headers
        value:
          operator: containsIgnoreCase
          expected: 'tom'
        headers:
          "X-MY-KEY":
            operator: containsIgnoreCase
            expected: 'my own value'
      - description: Confirm florent has headers
        value:
          operator: containsIgnoreCase
          expected: 'florent'
        headers:
          "X-MY-KEY":
            operator: containsIgnoreCase
            expected: 'my own value'

  - type: DOCKER
    title: Cleanup the docker environment
    command: docker compose down -v
    markdown: Remove all components from docker

  - type: CONCLUSION
    title: Conclusion
    markdown: |
      
