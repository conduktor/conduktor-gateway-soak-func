title: Virtual SQL
services:
  kafka1:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka2:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka3:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  gateway1:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      gateway.host: http://localhost:8888
  gateway2:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      gateway.host: http://localhost:8889

actions:

  - type: INTRODUCTION
    title: What is a virtual topic?
    markdown: |
      Conduktor Gateway's virtual topics allow you to create a *virtual* copy of an existing Kafka topic that can then have interceptors applied to it without affecting the original topic.
      
      For instance, I may have a topic 'cars' that contains information on cars of all colors, and an application that is only interested in Red cars. 
      
      To satisfy this requirement I can create a virtual topic `red-car` which filters out all but the red car data.

  - type: FILE
    title: Review the docker compose environment
    filename: docker-compose.yaml
    markdown: |
      As can be seen from docker-compose.yaml the demo environment consists of the following:
      
      * A single Zookeeper Server
      * A main 3 nodes Kafka cluster
      * A 2 nodes Conduktor Gateway server

  - type: DOCKER
    title: Start the docker environment
    command: docker compose up -d --wait

  - type: CREATE_VIRTUAL_CLUSTERS
    title: Create teamA virtual cluster
    gateway: gateway1
    name: teamA

  - type: CREATE_TOPICS
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topics:
      - name: cars
        replicationFactor: 1
        partitions: 1

  - type: LIST_TOPICS
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    assertExists:
      - cars

  - type: PRODUCE
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: cars
    messages:
      - value: '{"type":"Sports","price":75,"color":"blue"}'
      - value: '{"type":"SUV","price":55,"color":"red"}'

  - type: CONSUME
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: cars
    assertSize: 2
    assertions:
      - description: Confirm Sport
        value:
          operator: containsIgnoreCase
          expected: 'Sports'
      - description: Confirm SUV
        value:
          operator: containsIgnoreCase
          expected: 'SUV'

  - type: CREATE_TOPICS
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topics:
      - name: red-cars
        replicationFactor: 1
        partitions: 1

  - type: ADD_INTERCEPTORS
    gateway: gateway1
    interceptors:
      teamA:
        red-cars:
          "pluginClass": "io.conduktor.gateway.interceptor.VirtualSqlTopicPlugin"
          "priority": "100"
          "config": {
            "virtualTopic": "red-cars",
            "statement": "SELECT type, price as price FROM cars WHERE color = 'red'"
          }

  - type: LIST_INTERCEPTORS
    gateway: gateway1
    vcluster: teamA
    assertSize: 1
    assertNames:
      - red-cars

  - type: CONSUME
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: red-cars
    assertSize: 1
    assertions:
      - description: Confirm Sport is not there because it's not red
        value:
          operator: doesNotContainIgnoringCase
          expected: 'Sports'
      - description: Confirm SUV is there because it's red
        value:
          operator: containsIgnoreCase
          expected: 'SUV'

  - type: CONCLUSION
