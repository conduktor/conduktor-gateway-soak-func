title: SQL Topics
services:
  kafka1:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka2:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka3:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  gateway1:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8888
  gateway2:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8889

actions:
  - type: INTRODUCTION
    title: What is a SQL topic?
    markdown: |
      Conduktor Gateway's sql topics allow you to create a *virtual* instance of an existing Kafka topic based on an *sql* request.
            
      I may have a topic 'cars' that contains information on cars of all colors, and an application that is only interested in *red* cars. 
      
      To satisfy this requirement I can create a virtual topic `red-car` which a sql statement satisfies exactly that:
      
      ```sql
      SELECT type, price as money FROM cars WHERE color = 'red'
      ```

  - type: ASCIINEMA

  - type: FILE
    title: Review the docker compose environment
    filename: docker-compose.yaml
    markdown: |
      As can be seen from `docker-compose.yaml` the demo environment consists of the following:
      
      * A single Zookeeper Server
      * A main 3 nodes Kafka cluster
      * A 2 nodes Conduktor Gateway server

  - type: DOCKER
    title: Start the docker environment
    command: docker compose up -d --wait
    markdown: Start your docker environment

  - type: CREATE_VIRTUAL_CLUSTERS
    title: Create `teamA` virtual cluster
    gateway: gateway1
    name: teamA

  - type: FILE
    title: Review the kafka properties to connect to `teamA`
    filename: teamA-sa.properties

  - type: CREATE_TOPICS
    title: Create the `cars` topic
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topics:
      - name: cars
        replicationFactor: 1
        partitions: 1

  - type: PRODUCE
    title: Produce sample data to our `cars` topic
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: cars
    messages:
      - value: '{"type":"Sports","price":75,"color":"blue"}'
      - value: '{"type":"SUV","price":55,"color":"red"}'
    markdown: |
      Produce 2 records to the cars topic: our mock car data for cars.
      
      * A blue car
      * A red car

  - type: CONSUME
    title: Consume the `cars` topic
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: cars
    maxMessages: 2
    assertSize: 2
    assertions:
      - description: Confirm Sport
        value:
          operator: containsIgnoreCase
          expected: 'Sports'
      - description: Confirm SUV
        value:
          operator: containsIgnoreCase
          expected: 'SUV'
    markdown: |
      Let's confirm the 2 records are there by consuming from the `cars` topic.

  - type: ADD_INTERCEPTORS
    title: Create the sql topic `red-cars`
    gateway: gateway1
    interceptors:
      teamA:
        red-cars:
          "pluginClass": "io.conduktor.gateway.interceptor.VirtualSqlTopicPlugin"
          "priority": "100"
          "config": {
            "virtualTopic": "red-cars",
            "statement": "SELECT type, price as money FROM cars WHERE color = 'red'"
          }
    markdown: |
      Let's create the interceptor to filter out the red cars from the `cars` topic.

  - type: LIST_INTERCEPTORS
    title: List the virtual topic interceptors
    gateway: gateway1
    vcluster: teamA
    assertSize: 1
    assertNames:
      - red-cars

  - type: CONSUME
    title: Consume from the virtual topic `red-cars`
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: red-cars
    assertSize: 1
    assertions:
      - description: Confirm Sport is not there because it's not red
        value:
          operator: doesNotContainIgnoringCase
          expected: 'Sports'
      - description: Confirm SUV is there because it's red
        value:
          operator: containsIgnoreCase
          expected: 'SUV'
    markdown: |
      Let's consume from our virtual topic `red-cars`.

      You now see only one car, the red one, please note that its format changed according to our SQL statement's projection.

  - type: DOCKER
    title: Cleanup the docker environment
    command: docker compose down -v
    markdown: Remove all components from docker

  - type: CONCLUSION
    title: Conclusion
    markdown: |
      SQL topic is really a game changer!
