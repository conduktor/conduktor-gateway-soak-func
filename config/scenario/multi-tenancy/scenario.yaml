title: Multi tenancy
services:
  kafka1:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
  kafka2:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
  kafka3:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
  gateway1:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      gateway.host: http://localhost:8888
  gateway2:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      gateway.host: http://localhost:8888

actions:

  - type: FILE
    title: Review the docker compose environment
    filename: docker-compose.yaml
    markdown: |
      As can be seen from `docker-compose.yaml` the demo environment consists of the following:
      
      * A single Zookeeper Server
      * A main 3 nodes Kafka cluster
      * A 2 nodes Conduktor Gateway server

  - type: DOCKER
    title: Start the docker environment
    command: docker compose up -d --wait
    markdown: Start your docker environment

  - type: LIST_TOPICS
    title: List topics in the underlying kafka
    kafka: kafka1
    assertExists:
      - _auditLogs
      - _acls
      - _license
      - _topicRegistry
      - _interceptorConfigs
      - _schemas
      - _consumerGroupSubscriptionBackingTopic
      - _offsetStore
      - _topicMappings

  - type: CREATE_VIRTUAL_CLUSTERS
    title: Create the virtual cluster `london`
    gateway: gateway1
    name: london

  - type: CREATE_VIRTUAL_CLUSTERS
    title: Create the virtual cluster `paris`
    gateway: gateway1
    name: paris

  - type: CREATE_TOPICS
    title: Create the topic `london`
    kafka: london
    kafkaConfig: london-sa.properties
    topics:
      - name: londonTopic
        replicationFactor: 1
        partitions: 1

  - type: CREATE_TOPICS
    title: Create the topic `Paris`
    kafka: paris
    kafkaConfig: paris-sa.properties
    topics:
      - name: parisTopic
        replicationFactor: 1
        partitions: 1

  - type: LIST_TOPICS
    title: List the topics in `london` virtual cluster
    kafka: london
    kafkaConfig: london-sa.properties
    assertExists:
      - londonTopic

  - type: LIST_TOPICS
    title: List the topics in `paris` virtual cluster
    kafka: paris
    kafkaConfig: paris-sa.properties
    assertExists:
      - parisTopic

  - type: PRODUCE
    kafka: london
    kafkaConfig: london-sa.properties
    topic: londonTopic
    messages:
      - value: 'testMessageLondon'

  - type: CONSUME
    kafka: london
    kafkaConfig: london-sa.properties
    topic: londonTopic
    assertSize: 1

  - type: PRODUCE
    kafka: paris
    kafkaConfig: paris-sa.properties
    topic: parisTopic
    messages:
      - value: 'testMessageParis'

  - type: CONSUME
    kafka: paris
    kafkaConfig: paris-sa.properties
    topic: parisTopic
    assertSize: 1

  - type: CREATE_TOPICS
    kafka: kafka1
    topics:
      - name: existingLondonTopic
        replicationFactor: 1
        partitions: 1

  - type: PRODUCE
    kafka: kafka1
    topic: existingLondonTopic
    messages:
      - value: 'existingLondonMessage'

  - type: SH
    kafka: kafka1
    showOutput: true
    script: |
      curl \
        --silent \
        --user admin:conduktor \
        --request POST localhost:8888/admin/vclusters/v1/vcluster/london/topics/existingLondonTopic \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "physicalTopicName": "existingLondonTopic",
            "readOnly": false,
            "concentrated": false
          }' | jq

  - type: LIST_TOPICS
    kafka: london
    kafkaConfig: london-sa.properties
    assertExists:
     - londonTopic
     - existingLondonTopic

  - type: CREATE_TOPICS
    kafka: kafka1
    topics:
      - name: existingSharedTopic
        replicationFactor: 1
        partitions: 1

  - type: PRODUCE
    kafka: kafka1
    topic: existingSharedTopic
    messages:
      - value: 'existingSharedMessage'

  - type: SH
    showOutput: true
    kafka: kafka1
    script: |
      curl \
        --silent \
        --request POST localhost:8888/admin/vclusters/v1/vcluster/london/topics/existingSharedTopic \
        --user admin:conduktor \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "physicalTopicName": "existingSharedTopic",
          "readOnly": false,
          "concentrated": false
        }' | jq

  - type: LIST_TOPICS
    kafka: london
    kafkaConfig: london-sa.properties
    assertExists:
      - londonTopic
      - existingLondonTopic
      - existingSharedTopic

  - type: CONSUME
    kafka: london
    kafkaConfig: london-sa.properties
    topic: existingLondonTopic
    assertSize: 1
    assertions:
      - description: Assert contains the original london topic message
        value:
          operator: contains
          expected: 'existingLondonMessage'

  - type: CONSUME
    kafka: london
    kafkaConfig: london-sa.properties
    topic: existingSharedTopic
    assertSize: 1
    assertions:
      - description: Assert contains the original shared topic message
        value:
          operator: containsIgnoreCase
          expected: 'existingSharedMessage'

  - type: SH
    showOutput: true
    kafka: kafka1
    script: |
      curl \
        --silent \
        --user admin:conduktor \
        --request POST localhost:8888/admin/vclusters/v1/vcluster/paris/topics/existingSharedTopic \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "physicalTopicName": "existingSharedTopic",
          "readOnly": false,
          "concentrated": false
        }' | jq

  - type: LIST_TOPICS
    kafka: paris
    kafkaConfig: paris-sa.properties
    assertExists:
      - parisTopic
      - existingSharedTopic

  - type: CONSUME
    kafka: paris
    kafkaConfig: paris-sa.properties
    topic: existingSharedTopic
    assertSize: 1
    assertions:
      - description: Assert contains the original shared topic message
        value:
          operator: containsIgnoreCase
          expected: 'existingSharedMessage'

  - type: DOCKER
    title: Cleanup the docker environment
    command: docker compose down -v
    markdown: Remove all components from docker

  - type: CONCLUSION
    title: Conclusion
    markdown: Multi-tenancy/Virtual clusters are key to be in control of your kafka spend!

