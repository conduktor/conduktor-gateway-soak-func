title: Topic Concentration
services:
  kafka1:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
  kafka2:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
  kafka3:
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
  gateway1:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
  gateway2:
    docker:
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
    properties:
      bootstrap.servers: localhost:6969,localhost:7969
      auto.offset.reset: earliest
      enable.auto.commit: false
      client.id: clientId
actions:
  - type: CREATE_VIRTUAL_CLUSTERS
    gateway: gateway1
    names:
      - teamA

  - type: MARKDOWN
    markdown: |
      # Conduktor Proxy Topic Concentration Demo

      ## What is Topic Concentration?

      Conduktor Gateway's topic concentration feature allows you to store multiple topics's data on a single underlying Kafka
      topic. To clients, it appears that there are multiple topics and these can be read from as normal but in the underlying
      Kafka cluster there is a lot less resource required.

      For instance, I may see topics "times10_concentrationTest" and "times100_concentrationTest" in Gateway that are both stored on the
      underlying "concentrationTest_topic".

      ## Running the demo
      In this demo we are going to create a concentrated topic for powering several virtual topics. Create the virtual topics, produce and consume data to them, and explore how this works.

      ### Step 1: Review the environment

      As can be seen from `docker-compose.yaml` the demo environment consists of the following:

      * A single Zookeeper Server
      * A 2 node Kafka cluster
      * A single Conduktor Gateway container
      * A Kafka Client container (this provides nothing more than a place to run kafka client commands)

      ### Step 2: Start the environment

      Start the environment with

      ```bash
      docker compose up --wait --detach
      ```

      ### Step 3: Create underlying topic

      In this demo we will create a cluster that consists of a single unconcentrated topic from the source cluster and 2 concentrated topics.
     
      Let's start by creating topics.

      Create the underlying `hold-many-virtual-topics` topic on the backing Kafka.

  - type: CREATE_TOPICS
    kafka: kafka1
    topics:
      - name: hold-many-virtual-topics
        replicationFactor: 1
        partitions: 10

  - type: MARKDOWN
    markdown: |
      We donâ€™t need to create the physical topic that backs the concentrated topics, it will automatically be created when a client topic starts using the concentrated topic.
      We only have to tell Gateway how to map client topics to concentrated topics.
      In this case, any  client topic started with `concentrated-` will be concentrated to the `hold-many-virtual-topics`.

  - type: BASH
    kafka: kafka1
    showOutput: true
    script: |
      curl \
        --silent \
        --user "admin:conduktor" \
        --request POST 'localhost:8888/admin/vclusters/v1/vcluster/teamA/topics/concentrated-.%2A' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "physicalTopicName": "hold-many-virtual-topics",
            "readOnly": false,
            "concentrated": true
          }' | jq

  - type: MARKDOWN
    markdown: |
      ### Step 4: Create concentrated topics

      Now let's create logical topics
     
      One with 10 partitions

  - type: BASH
    kafka: teamA
    showOutput: true
    script: |
      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config teamA.properties \
        --topic concentrated-normal \
        --create
      
      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config teamA.properties \
        --topic concentrated-delete \
        --config cleanup.policy=delete \
        --create
  
      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config teamA.properties \
        --config cleanup.policy=compact \
        --topic concentrated-compact \
        --create

      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config teamA.properties \
        --config cleanup.policy=delete,compact \
        --topic concentrated-delete-compact \
        --create

      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config teamA.properties \
        --config cleanup.policy=compact,delete \
        --topic concentrated-compact-delete \
        --create

      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config teamA.properties \
        --config retention.ms=10000 \
        --topic concentrated-small-retention \
        --create

      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config teamA.properties \
        --config retention.ms=6048000000 \
        --topic concentrated-large-retention \
        --create

      kafka-topics \
        --bootstrap-server localhost:6969 \
        --command-config teamA.properties \
        --list

      kafka-topics \
        --bootstrap-server localhost:29092 \
        --describe

  - type: CREATE_TOPICS
    kafka: teamA
    topics:
      - name: concentrated-topic-with-10-partitions
        replicationFactor: 1
        partitions: 10
      - name: concentrated-topic-with-100-partitions
        replicationFactor: 1
        partitions: 100

  - type: LIST_TOPICS
    kafka: teamA
    assertExists:
      - concentrated-topic-with-10-partitions
      - concentrated-topic-with-100-partitions

  - type: MARKDOWN
    markdown: |
      If we list topics from the backend cluster, not from Gateway perspective, we do not see the concentrated topics.

  - type: PRODUCE
    kafka: teamA
    topic: concentrated-topic-with-10-partitions
    messages:
      - value: '{"type": "Sports", "price": 75, "color": "blue"}'

  - type: CONSUME
    kafka: teamA
    topics:
      - concentrated-topic-with-10-partitions
    assertSize: 1
    assertions:
      - description: Assert expected message
        value:
          operator: contains
          expected: '{"type": "Sports", "price": 75, "color": "blue"}'

  - type: PRODUCE
    kafka: teamA
    topic: concentrated-topic-with-100-partitions
    messages:
      - value: '{"msg":"hello world"}'

  - type: CONSUME
    kafka: teamA
    topics:
      - concentrated-topic-with-100-partitions
    assertSize: 1
    assertions:
      - description: Assert expected message
        value:
          operator: contains
          expected: '{"msg":"hello world"}'

  - type: BASH
    showOutput: true
    kafka: teamA
    script: |
      docker compose --profile ksqldb up -d --wait

  - type: SUCCESS
    description: Done

