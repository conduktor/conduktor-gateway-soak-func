title: Sainsburry
services:
  kafka1:
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka2:
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka3:
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  gateway1:
    docker:
      image: conduktor/conduktor-gateway:2.1.5
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_CLUSTER_ID: private
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8888
  gateway2:
    docker:
      image: conduktor/conduktor-gateway:2.1.5
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_CLUSTER_ID: private
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8888

actions:

  - type: INTRODUCTION
    title: Sainsbury reproduction model

  - type: ASCIINEMA

  - type: FILE
    filename: docker-compose.yaml

  - type: DOCKER
    command: docker compose up --detach --wait

  - type: CREATE_VIRTUAL_CLUSTERS
    gateway: gateway1
    name: teamA

  - type: CREATE_TOPICS
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topics:
      - name: concentrated
        replicationFactor: 1
        partitions: 10
        config:
          cleanup.policy: compact

  - type: ADD_TOPIC_MAPPING
    gateway: gateway1
    vcluster: teamA
    physicalTopicName: concentrated
    topicPattern: unlimited-.*

  - type: SH
    title: Create 100 topics in //
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      for topic_number in `seq 100`; do 
        echo unlimited-${topic_number}; 
      done | \
        xargs -I _ -P16 kafka-topics \
          --bootstrap-server ${BOOTSTRAP_SERVERS} \
          --command-config ${KAFKA_CONFIG_FILE} \
          --config cleanup.policy=compact \
          --create --topic _

  - type: SH
    title: Assert 100 virtual topics
    kafka: kafka1
    showOutput: true
    script: |
      echo nb topics = $(curl \
        --silent \
        --user 'admin:conduktor' \
        --header 'Content-Type: application/json' \
        localhost:8888/topics/teamA | jq 'length')

      echo nb topics mappings = $(curl \
        --silent \
        --user 'admin:conduktor' \
        --header 'Content-Type: application/json' \
        localhost:8888/topicMappings/teamA | jq 'length')

      echo nb physical topics = $(kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --list | wc -l)
    assertOutputContains:
      - "nb topics = 100"
      - "nb topics mappings = 101"
      - "nb physical topics = 11"

  - type: SH
    title: Send data to the 100 topics in //
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      for topic_number in `seq 100`; do 
        echo unlimited-${topic_number}; 
      done | \
        xargs -I _ -P15 sh -c "echo _ | kafka-console-producer \
          --bootstrap-server ${BOOTSTRAP_SERVERS} \
          --producer.config ${KAFKA_CONFIG_FILE} \
          --topic _"

  - type: SH
    title: Assert 100 elements in
    kafka: kafka1
    showOutput: true
    script: |
      kafka-console-consumer \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --topic concentrated_compacted \
        --from-beginning \
        --max-messages 100 | wc -l
    assertOutputContains:
      - "Processed a total of 100 messages"

  - type: SH
    title: Consume data to the topics using groups in //
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      for topic_number in `seq 100`; do 
        echo unlimited-${topic_number};
      done | \
        xargs -I _ -P15 sh -c "kafka-console-consumer \
          --bootstrap-server ${BOOTSTRAP_SERVERS} \
          --consumer.config ${KAFKA_CONFIG_FILE} \
          --topic _ \
          --group _ \
          --from-beginning \
          --max-messages 1"

  - type: SH
    title: Assert number of consumer groups
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      echo "number of consumer groups " $(kafka-consumer-groups \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config ${KAFKA_CONFIG_FILE} \
        --list | wc -l )
    assertOutputContains:
      - "number of consumer groups  100"

  - type: SH
    title: Describe each consumer groups
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      for topic_number in `seq 100`; do 
        echo unlimited-${topic_number};
      done | \
        xargs -I _ -P15 sh -c "kafka-consumer-groups \
          --bootstrap-server ${BOOTSTRAP_SERVERS} \
          --command-config ${KAFKA_CONFIG_FILE} \
          --group _ \
          --describe"
    assertOutputDoesNotContain:
      - "Error:"

  - type: SH
    title: Delete topics  in //
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      for topic_number in `seq 100`; do 
        echo unlimited-${topic_number}; 
      done | \
        xargs -I _ -P15 kafka-topics \
          --bootstrap-server ${BOOTSTRAP_SERVERS} \
          --command-config ${KAFKA_CONFIG_FILE} \
          --delete --topic _
    assertOutputDoesNotContain:
      - "Error while executing topic command"

  - type: SH
    title: Assert 0 topic
    kafka: kafka1
    showOutput: true
    script: |
      echo nb topics = $(curl \
        --silent \
        --user 'admin:conduktor' \
        --header 'Content-Type: application/json' \
        localhost:8888/topics/teamA | jq 'length')

      echo nb topics mappings = $(curl \
        --silent \
        --user 'admin:conduktor' \
        --header 'Content-Type: application/json' \
        localhost:8888/topicMappings/teamA | jq 'length')

      echo nb physical topics = $(kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --list | wc -l)
    assertOutputContains:
      - "nb topics = 0"
      - "nb topics mappings = 1"
      - "nb physical topics = 11"

  - type: SH
    title: Create topic and initialize with simple data and fetch it
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      kafka-topics \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --command-config ${KAFKA_CONFIG_FILE} \
        --config cleanup.policy=compact \
        --create --if-not-exists \
        --topic unlimited-cache

      echo '{"msg": "hello world"}' \
        | kafka-console-producer \
          --bootstrap-server ${BOOTSTRAP_SERVERS} \
          --producer.config ${KAFKA_CONFIG_FILE} \
          --topic unlimited-cache

      kafka-console-consumer \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --consumer.config ${KAFKA_CONFIG_FILE} \
        --topic unlimited-cache \
        --from-beginning \
        --max-messages 1 | jq

  - type: ADD_INTERCEPTORS
    gateway: gateway1
    interceptors:
      teamA:
        fetch: {
          "pluginClass": "io.conduktor.gateway.interceptor.CacheInterceptorPlugin",
          "priority": 100,
          "config": {
            "topic": ".*"
          }
        }

  - type: SH
    title: Read from topic and it works
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      kafka-console-consumer \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --consumer.config ${KAFKA_CONFIG_FILE} \
        --topic unlimited-cache \
        --from-beginning \
        --max-messages 1 | jq

  - type: SH
    title: Add transactional data
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
        kcat -P -b ${BOOTSTRAP_SERVERS} \
          -f /clientConfig/teamA-sa.properties \
          -t unlimited-cache \
          -X transactional.id=id

  - type: SH
    title: Read from topic and it fails
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    showOutput: true
    script: |
      kafka-console-consumer \
        --bootstrap-server ${BOOTSTRAP_SERVERS} \
        --consumer.config ${KAFKA_CONFIG_FILE} \
        --topic unlimited-cache \
        --from-beginning \
        --max-messages 1 | jq

  - type: DOCKER
    command: docker compose down --volumes

  - type: CONCLUSION
    markdown: Sainsbury is a key customer, let's make sure we serve them well
