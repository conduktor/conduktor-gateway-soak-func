title: ksqldb
services:
  kafka1:
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka2:
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  kafka3:
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    properties:
      bootstrap.servers: localhost:29092,localhost:29093,localhost:29094
  gateway1:
    docker:
      image: ghcr.io/conduktor/conduktor-gateway-distro
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
        GATEWAY_CLUSTER_ID: private
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8888
  gateway2:
    docker:
      image: ghcr.io/conduktor/conduktor-gateway-distro
      environment:
        GATEWAY_ADVERTISED_HOST: localhost
        GATEWAY_SECURITY_PROTOCOL: SASL_PLAINTEXT
        GATEWAY_FEATURE_FLAGS_MULTI_TENANCY: true
        GATEWAY_CLUSTER_ID: private
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8889

actions:

  - type: INTRODUCTION
    title: a ksqlDB experience on concentrated topics

  - type: ASCIINEMA

  - type: FILE
    title: Review the docker compose environment
    filename: docker-compose.yaml
    markdown: |
      As can be seen from `docker-compose.yaml` the demo environment consists of the following:
      
      * A single Zookeeper Server
      * A main 3 nodes Kafka cluster
      * A 2 nodes Conduktor Gateway server

  - type: DOCKER
    title: Start the docker environment
    command: docker compose up -d --wait
    markdown: Start your docker environment

  - type: CREATE_VIRTUAL_CLUSTERS
    gateway: gateway1
    name: teamA

  - type: ADD_TOPIC_MAPPING
    gateway: gateway1
    vcluster: teamA
    physicalTopicName: concentrated
    topicPattern: .*
    markdown: |
      Let's tell the Gateway that topic matching the pattern `.*` need to be concentrated into the underlying `concentrated` physical topic.
      
      Note: We donâ€™t need to create the physical topic that backs the concentrated topics, it will automatically be created when a client topic starts using the concentrated topic.
      

  - type: DOCKER
    title: Start ksqlDB
    command: docker compose --profile ksqldb up -d --wait

  - type: LIST_TOPICS
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    assertExists:
      - _confluent-ksql-default__command_topic
      - default_ksql_processing_log

  - type: LIST_TOPICS
    kafka: kafka1
    assertExists:
      - concentrated
    assertDoesNotExist:
      - _confluent-ksql-default__command_topic
      - default_ksql_processing_log
